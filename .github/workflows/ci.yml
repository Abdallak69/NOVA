name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        exclude:
          # Skip some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Install dependencies with uv
      run: |
        uv sync --all-extras --dev
      
    - name: Install package in development mode (fallback)
      if: failure()
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,all]

    - name: Run tests
      run: |
        uv run pytest --cov=nova --cov-report=xml --cov-report=term-missing
      env:
        # Disable GUI tests in CI
        QT_QPA_PLATFORM: offscreen

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint and format
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: uv sync --dev

    - name: Run ruff check
      run: uv run ruff check --output-format=github .

    - name: Run ruff format check
      run: uv run ruff format --check .

    - name: Run isort check
      run: uv run isort --check-only --diff .

    - name: Run black check
      run: uv run black --check --diff .

  type-check:
    name: Type checking
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: uv sync --dev

    - name: Run mypy
      run: uv run mypy src --ignore-missing-imports

  security:
    name: Security scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: uv sync --dev

    - name: Run bandit security scan
      run: uv run bandit -r src -f json -o bandit-report.json

    - name: Upload bandit report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json

  docs:
    name: Build documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: uv sync --dev

    - name: Build docs
      run: |
        if [ -f "docs/Makefile" ]; then
          cd docs && make html
        else
          echo "No documentation build configured"
        fi

  build:
    name: Build package
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build

    - name: Build package
      run: python -m build

    - name: Check package
      run: |
        python -m pip install twine
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  integration:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Run integration tests
      run: uv run pytest -m integration --verbose
      env:
        QT_QPA_PLATFORM: offscreen

    - name: Test CLI commands
      run: |
        # Test CLI installation and basic commands
        uv run nova --version
        uv run nova info
        uv run nova backends
        
    - name: Test package installation
      run: |
        # Test that the package installs correctly
        pip install dist/*.whl
        python -c "import nova; print('Package imported successfully')" 